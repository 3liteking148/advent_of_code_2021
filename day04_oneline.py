from functools import reduce
import re


print((lambda scores: reduce(lambda a, b: a if a[0] > b[0] else b, scores))((lambda bingo, input_, seq_size, test: [bingo(bingo, input_[i:i+25], input_[0:seq_size], None, test) for i in range(seq_size, len(input_), 25)])((lambda bingo, card, seq, prev, test: bingo(bingo, [-1 if x == seq[0] else x for x in card], seq[1:], seq[0], test) if not (test(test, card, lambda slice_: (slice_[0]+1, slice_[1], slice_[2]) if slice_[0] < 5 else 0, (0, 25, 5)) or test(test, card, lambda slice_: (slice_[0]+5, slice_[1]+5, slice_[2]) if slice_[1] < 25 else 0, (0, 5, 1))) else (len(seq), sum([0 if x == -1 else x for x in card]) * prev)), [int(x) for x in re.findall(r'\b\d+\b', open('day4.txt', 'r').read())], len(re.findall(r',', open('day4.txt', 'r').read())) + 1, lambda test, card, slicer, slice_: test(test, card, slicer, slicer(slice_)) or reduce(lambda a, b: a and b == -1, card[slice(*slice_)], True) if slice_ != 0 else False))[1])
print((lambda scores: reduce(lambda a, b: a if a[0] < b[0] else b, scores))((lambda bingo, input_, seq_size, test: [bingo(bingo, input_[i:i+25], input_[0:seq_size], None, test) for i in range(seq_size, len(input_), 25)])((lambda bingo, card, seq, prev, test: bingo(bingo, [-1 if x == seq[0] else x for x in card], seq[1:], seq[0], test) if not (test(test, card, lambda slice_: (slice_[0]+1, slice_[1], slice_[2]) if slice_[0] < 5 else 0, (0, 25, 5)) or test(test, card, lambda slice_: (slice_[0]+5, slice_[1]+5, slice_[2]) if slice_[1] < 25 else 0, (0, 5, 1))) else (len(seq), sum([0 if x == -1 else x for x in card]) * prev)), [int(x) for x in re.findall(r'\b\d+\b', open('day4.txt', 'r').read())], len(re.findall(r',', open('day4.txt', 'r').read())) + 1, lambda test, card, slicer, slice_: test(test, card, slicer, slicer(slice_)) or reduce(lambda a, b: a and b == -1, card[slice(*slice_)], True) if slice_ != 0 else False))[1])
